generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String?
  role  String @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]
}
    
model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobTitles {
  id               String     @id @default(uuid())
  name             String?
  nameAbbreviation String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  profiles         Profiles[]
}

model Locations {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  profiles  Profiles[]
}

model Profiles {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  firstName              String
  lastName               String
  searchCol              String?
  avatarUrl              String?
  locationId             String?
  jobTitleId             String?
  jobLevelTier           String?
  jobLevelTitle          String?
  department             String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  terminatedAt           DateTime?
  deleted                Boolean                  @default(false)
  jobTitles              JobTitles?               @relation(fields: [jobTitleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  locations              Locations?               @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  comments               Comments[]
  projectMembers         ProjectMembers[]
  projectMembersVersions ProjectMembersVersions[]
  projects               Projects[]
  projectsVersions       ProjectsVersions[]
  votes                  Vote[]
// here "name" was changed for "map"
  @@index([email], map: "profiles_email_idx")
  @@index([jobTitleId], map: "profiles_job_title_id_idx")
  @@index([locationId], map: "profiles_location_id_idx")
  @@index([searchCol], map: "profiles_search_col_idx")
}

model ProjectMembers {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  projectId       String
  profileId       String
  hoursPerWeek    Int?
  active          Boolean           @default(true)
  profile         Profiles          @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project         Projects          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contributorPath ContributorPath[]
  role            Disciplines[]
  practicedSkills Skills[]
//also here "name" was changed for "map" 
  @@unique([projectId, profileId], name: "project_members_project_id_profile_id_key")
  @@index([profileId], map: "project_members_profile_id_idx")
  @@index([projectId], map: "project_members_project_id_idx")
}

model ProjectMembersVersions {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  projectId       String
  profileId       String
  hoursPerWeek    Int?
  role            String?
  active          Boolean  @default(true)
  practicedSkills String?
  profile         Profiles @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project         Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//also here the map for name change 
  @@index([projectId, profileId], map: "project_members_v_project_id_profile_id_key")
  @@index([profileId], map: "project_members_v_profile_id_idx")
  @@index([projectId], map: "project_members_v_project_id_idx")
}

model ProjectStatus {
  name             String             @id
  color            String             @default("#1d1d1d")
  stage            String?            @default("ongoing project")
  projects         Projects[]
  projectsVersions ProjectsVersions[]
}

model Projects {
  id                     String                   @id @default(uuid())
  ownerId                String?
  name                   String                   @unique
  logo                   String?
  description            String?
  valueStatement         String?
  target                 String?
  demo                   String?
  slackChannel           String?
  isApproved             Boolean                  @default(false)
  status                 String?                  @default("Idea Submitted")
  tierName               String?                  @default("Tier 3 (Experiment)")
  searchSkills           String                   @default("")
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  isArchived             Boolean                  @default(false)
  helpWanted             Boolean                  @default(true)
  tsColumn               Unsupported("tsvector")?
  owner                  Profiles?                @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  projectStatus          ProjectStatus?           @relation(fields: [status], references: [name], onDelete: SetNull, onUpdate: Cascade)
  innovationTiers        InnovationTiers?         @relation(fields: [tierName], references: [name], onDelete: SetNull, onUpdate: Cascade)
  comments               Comments[]
  projectMembers         ProjectMembers[]
  projectMembersVersions ProjectMembersVersions[]
  stages                 ProjectStages[]
  projectVersions        ProjectsVersions[]
  relatedProjectsA       RelatedProjects[]        @relation("RelatedProjectsA")
  relatedProjectsB       RelatedProjects[]        @relation("RelatedProjectsB")
  repoUrls               Repos[]
  votes                  Vote[]
  disciplines            Disciplines[]
  labels                 Labels[]
  skills                 Skills[]
// here also the change of name for map
  @@index([ownerId], map: "projects_owner_id_idx")
  @@index([status], map: "projects_status_idx")
  @@index([isArchived], map: "projects_isArchived_idx")
  @@index([tierName], map: "projects_innovation_tier_idx")
  @@index([tsColumn], map: "projects_ts_column_idx")
}

model ProjectsVersions {
  id             Int              @id @default(autoincrement())
  ownerId        String?
  name           String
  logo           String?
  description    String?
  valueStatement String?
  target         String?
  demo           String?
  slackChannel   String?
  isApproved     Boolean          @default(false)
  status         String?          @default("Idea Submitted")
  searchSkills   String           @default("")
  createdAt      DateTime         @default(now())
  membersCount   Int              @default(0)
  votesCount     Int              @default(0)
  isArchived     Boolean          @default(false)
  projectId      String
  tierName       String?          @default("Tier 3 (Experiment)")
  owner          Profiles?        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project        Projects         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectStatus  ProjectStatus?   @relation(fields: [status], references: [name], onDelete: SetNull, onUpdate: Cascade)
  innovationTier InnovationTiers? @relation(fields: [tierName], references: [name], onDelete: SetNull, onUpdate: Cascade)

  @@index([ownerId], map: "projects_version_owner_id_idx")
  @@index([status], map: "projects_version_status_idx")
  @@index([tierName], map: "projects_version_tier_idx")
  @@index([isArchived], map: "projects_version_isArchived_idx")
}

model Vote {
  projectId String
  profileId String
  createdAt DateTime @default(now())
  profile   Profiles @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([projectId, profileId])
}

model Skills {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  projectMembers ProjectMembers[]
  projects       Projects[]
// also here the map for name change
  @@index([name], map: "skills_name_idx")
}

model Disciplines {
  id             String           @id @default(uuid())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  projectMembers ProjectMembers[]
  projects       Projects[]
// also here the map for name change
  @@index([name], map: "discipline_name_idx")
}

model Labels {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  projects  Projects[]
}

model InnovationTiers {
  name             String             @id
  benefits         String
  requisites       String
  goals            String
  defaultRow       Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  projects         Projects[]
  projectsVersions ProjectsVersions[]
}

model Comments {
  id        String     @id @default(uuid())
  body      String
  authorId  String
  projectId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  parentId  String?
  author    Profiles   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent    Comments?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Projects   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Comments[] @relation("ParentComment")
}

model ProjectStages {
  id              String            @id @default(uuid())
  name            String
  criteria        String
  mission         String
  projectId       String
  position        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  project         Projects          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contributorPath ContributorPath[]
  projectTasks    ProjectTasks[]
}

model ProjectTasks {
  id              String            @id @default(uuid())
  description     String
  position        Int
  projectStageId  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  projectStage    ProjectStages     @relation(fields: [projectStageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contributorPath ContributorPath[]
}

model ContributorPath {
  id              String         @id @default(uuid())
  projectTaskId   String
  projectMemberId String
  projectStageId  String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  projectMember   ProjectMembers @relation(fields: [projectMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectStage    ProjectStages  @relation(fields: [projectStageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectTask     ProjectTasks   @relation(fields: [projectTaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Repos {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  projectId String
  projects  Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RelatedProjects {
  id         Int      @id @default(autoincrement())
  projectAId String
  projectBId String
  projectA   Projects @relation("RelatedProjectsA", fields: [projectAId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectB   Projects @relation("RelatedProjectsB", fields: [projectBId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([projectAId, projectBId])
}
